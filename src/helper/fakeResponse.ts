export const fakeResponse = {
  overview:
    "Este projeto, denominado 'meu-projeto-genial', é uma aplicação full-stack utilizando React com Vite no frontend e Node.js com Express no backend, além de um banco de dados PostgreSQL. O objetivo é fornecer uma base sólida para o desenvolvimento de aplicações web modernas e escaláveis, focando em práticas recomendadas de arquitetura e desenvolvimento.",
  techRationale:
    "Optamos por React com Vite para o frontend devido à sua abordagem moderna e eficiente para construção de interfaces de usuário, oferecendo recarregamento rápido e uma experiência de desenvolvimento fluida. O Node.js com Express foi escolhido para o backend pela sua capacidade de lidar com operações assíncronas de forma eficiente, além de ser uma escolha popular para aplicações web. O PostgreSQL foi selecionado como banco de dados relacional devido à sua robustez, suporte a transações e ampla comunidade de suporte. A utilização de Docker facilita a configuração e o gerenciamento do ambiente de desenvolvimento, garantindo que todos os desenvolvedores trabalhem em um ambiente consistente.",
  directoryStructure:
    "/meu-projeto-genial\n  |- /frontend/\n  |  |- /src/\n  |  |  |- App.jsx\n  |  |  |- index.jsx\n  |  |  |- /components/\n  |  |  |- /styles/\n  |  |- index.html\n  |  |- package.json\n  |  |- vite.config.js\n  |- /backend/\n  |  |- /src/\n  |  |  |- index.js\n  |  |  |- /routes/\n  |  |  |- /controllers/\n  |  |  |- /models/\n  |  |- package.json\n  |  |- .env\n  |- Dockerfile.frontend\n  |- Dockerfile.backend\n  |- docker-compose.yml",
  frontendGuide:
    "1. Crie um diretório para o projeto e navegue até ele:\n   ```bash\n   mkdir meu-projeto-genial\n   cd meu-projeto-genial\n   ```\n\n2. Inicie um novo projeto Vite:\n   ```bash\n   npm create vite@latest frontend -- --template react\n   ```\n   Este comando utiliza o Vite para criar um novo projeto React na pasta 'frontend'. O template 'react' já vem configurado com as dependências básicas.\n\n3. Navegue até o diretório do frontend:\n   ```bash\n   cd frontend\n   ```\n\n4. Instale as dependências do projeto:\n   ```bash\n   npm install\n   ```\n   Este comando instala todas as dependências listadas no 'package.json' do projeto.\n\n5. Para iniciar o servidor de desenvolvimento, execute:\n   ```bash\n   npm run dev\n   ```\n   O Vite inicia um servidor de desenvolvimento e fornece uma URL onde você pode ver sua aplicação no navegador.\n\n6. Para estruturar o código, crie pastas para componentes e estilos:\n   ```bash\n   mkdir src/components src/styles\n   ```\n   Isso ajudará a manter o código organizado.\n\n7. Acesse o projeto no navegador através da URL fornecida no terminal (geralmente http://localhost:5173).",
  backendGuide:
    "1. Navegue de volta ao diretório principal do projeto:\n   ```bash\n   cd ..\n   ```\n\n2. Crie um novo diretório para o backend:\n   ```bash\n   mkdir backend\n   cd backend\n   ```\n\n3. Inicialize um novo projeto Node.js:\n   ```bash\n   npm init -y\n   ```\n   O '-y' aceita todas as configurações padrão, criando um 'package.json' básico.\n\n4. Instale as dependências necessárias:\n   ```bash\n   npm install express dotenv pg\n   ```\n   Aqui estamos instalando o Express para construir a API, dotenv para gerenciar variáveis de ambiente e pg para conectar ao PostgreSQL.\n\n5. Crie a estrutura básica de arquivos:\n   ```bash\n   mkdir src\n   touch src/index.js\n   touch .env\n   ```\n   O arquivo 'index.js' será o ponto de entrada da aplicação e '.env' armazenará variáveis sensíveis como credenciais do banco de dados.\n\n6. Abra o 'src/index.js' e adicione o seguinte código:\n   ```javascript\n   const express = require('express');\n   const app = express();\n   const PORT = process.env.PORT || 3000;\n\n   app.use(express.json());\n\n   app.get('/', (req, res) => {\n     res.send('API funcionando!');\n   });\n\n   app.listen(PORT, () => {\n     console.log(`Servidor rodando na porta ${PORT}`);\n   });\n   ```\n   Este código configura um servidor básico que responde a requisições GET na raiz.\n\n7. Para iniciar o servidor, execute:\n   ```bash\n   node src/index.js\n   ```\n   O servidor deve estar rodando e você pode testá-lo acessando http://localhost:3000.",
  databaseGuide:
    "1. Instale o PostgreSQL em sua máquina. Você pode encontrar instruções em https://www.postgresql.org/download/. Após a instalação, inicie o serviço do PostgreSQL.\n\n2. Acesse o console do PostgreSQL:\n   ```bash\n   psql -U postgres\n   ```\n   Você pode precisar fornecer a senha do usuário 'postgres'.\n\n3. Crie um novo banco de dados:\n   ```sql\n   CREATE DATABASE meu_projeto_genial;\n   ```\n\n4. Para conectar o backend ao banco de dados, adicione as seguintes variáveis ao arquivo '.env':\n   ```plaintext\n   DB_USER=seu_usuario\n   DB_PASSWORD=sua_senha\n   DB_HOST=localhost\n   DB_PORT=5432\n   DB_NAME=meu_projeto_genial\n   ```\n   Substitua 'seu_usuario' e 'sua_senha' pelas credenciais de acesso ao banco de dados.",
  dockerGuide:
    "1. Crie um arquivo chamado 'Dockerfile.frontend' no diretório raiz com o seguinte conteúdo:\n   ```dockerfile\n   FROM node:16\n   WORKDIR /app\n   COPY frontend/package.json ./\n   RUN npm install\n   COPY frontend .\n   CMD [ \"npm\", \"run\", \"dev\" ]\n   ```\n   Este Dockerfile configura um ambiente para o frontend, instalando as dependências e iniciando o servidor de desenvolvimento.\n\n2. Crie um arquivo chamado 'Dockerfile.backend' no diretório raiz com o seguinte conteúdo:\n   ```dockerfile\n   FROM node:16\n   WORKDIR /app\n   COPY backend/package.json ./\n   RUN npm install\n   COPY backend .\n   CMD [ \"node\", \"src/index.js\" ]\n   ```\n   Este Dockerfile configura o ambiente para o backend.\n\n3. Crie um arquivo 'docker-compose.yml' na raiz do projeto com o seguinte conteúdo:\n   ```yaml\n   version: '3'\n   services:\n     frontend:\n       build:\n         context: .\n         dockerfile: Dockerfile.frontend\n       ports:\n         - '5173:5173'\n     backend:\n       build:\n         context: .\n         dockerfile: Dockerfile.backend\n       ports:\n         - '3000:3000'\n       environment:\n         - DB_USER=seu_usuario\n         - DB_PASSWORD=sua_senha\n         - DB_HOST=db\n         - DB_PORT=5432\n         - DB_NAME=meu_projeto_genial\n     db:\n       image: postgres\n       environment:\n         POSTGRES_USER: seu_usuario\n         POSTGRES_PASSWORD: sua_senha\n         POSTGRES_DB: meu_projeto_genial\n       ports:\n         - '5432:5432'\n   ```\n   Este arquivo orquestra os serviços do frontend, backend e banco de dados PostgreSQL.\n\n4. Para iniciar todos os serviços com Docker, execute:\n   ```bash\n   docker-compose up --build\n   ```\n   Isso irá construir as imagens e iniciar os containers. Acesse o frontend em http://localhost:5173 e o backend em http://localhost:3000.",
  nextSteps:
    "1. Explore a estrutura do projeto e comece a implementar funcionalidades específicas para sua aplicação.\n2. Adicione rotas e controladores no backend para gerenciar dados e interagir com o banco de dados.\n3. Desenvolva componentes React no frontend para criar a interface do usuário.\n4. Considere implementar autenticação e autorização para proteger seu aplicativo.\n5. Teste sua aplicação e faça ajustes conforme necessário.",
};
